/*  Metrowerks Standard Library  Version 4.0  1998 August 10  */

/*  $Date:: 3/10/98 8:25 PM                                  $ 
 *  $Revision:: 11                                           $ 
 *  $NoKeywords: $ 
 *
 *		Portions Copyright © 1995-1998 Metrowerks, Inc.
 *		All rights reserved.
 */

/**
 **  queue            // hh 971223 Changed filename from queue.h to queue
 **
 **  Lib++  : The Modena C++ Standard Library,
 **           Version 2.4, October 1997
 **
 **  Copyright (c) 1995-1997 Modena Software Inc.
 **/

#ifndef _QUEUE              // hh 971223 Made include guards standard
#define _QUEUE

#include <mcompile.h>

#include <heap.h>       // hh 971220 fixed MOD_INCLUDE
#include <functional>   // hh 971220 fixed MOD_INCLUDE // hh 980111 removed
#include <deque>        // hh 971229 added <deque>
#include <vector>        // hh 971229 added <vector>

#ifndef RC_INVOKED // hh 971230

#pragma options align=native
#if defined(__CFM68K__) && !defined(__USING_STATIC_LIBS__)
	#pragma import on
#endif

#ifdef MSIPL_USING_NAMESPACE
	namespace std {
#endif

// Subclause 23.2.3.1 -- clause queue

template <class T, class DEFTEMPARG (Container, deque<T>) >
class queue {

	friend bool  // hh 980113 Updated friend syntax and moved out
	operator== <T, Container>(const queue<T, Container>& x, const queue<T, Container>& y);

	friend bool
	operator< <T, Container>(const queue<T, Container>& x, const queue<T, Container>& y);

	friend bool
	operator!= <T, Container>(const queue<T, Container>& x, const queue<T, Container>& y);

	friend bool
	operator<= <T, Container>(const queue<T, Container>& x, const queue<T, Container>& y);

	friend bool
	operator>= <T, Container>(const queue<T, Container>& x, const queue<T, Container>& y);

	friend bool
	operator> <T, Container>(const queue<T, Container>& x, const queue<T, Container>& y);

public:
    typedef typename Container::value_type       value_type;
    typedef typename Container::size_type        size_type;
    typedef Container                            container_type;

protected:
    Container c;

public:
    explicit queue (const Container& cont = Container ()) 
    : c (cont) {}

    bool               empty ()             const { return c.empty (); }
    size_type          size ()              const { return c.size ();  }
    value_type&        front ()                   { return c.front (); }
    const value_type&  front ()             const { return c.front (); }
    value_type&        back ()                    { return c.back ();  }
    const value_type&  back ()              const { return c.back ();  }
    void               push (const value_type& x) { c.push_back (x);   }
    void               pop ()                     { c.pop_front ();    }
};

template <class T, class Container>
inline
bool
operator== (const queue<T, Container>& x, const queue<T, Container>& y)
{
	return x.c == y.c;
}

template <class T, class Container>
inline
bool
operator< (const queue<T, Container>& x, const queue<T, Container>& y)
{
	return x.c < y.c;
}

template <class T, class Container>
inline
bool
operator!= (const queue<T, Container>& x, const queue<T, Container>& y)
{
	return x.c != y.c;
}

template <class T, class Container>
inline
bool
operator<= (const queue<T, Container>& x, const queue<T, Container>& y)
{
	return x.c <= y.c;
}

template <class T, class Container>
inline
bool
operator>= (const queue<T, Container>& x, const queue<T, Container>& y)
{
	return x.c >= y.c;
}

template <class T, class Container>
inline
bool
operator> (const queue<T, Container>& x, const queue<T, Container>& y)
{
	return x.c > y.c;
}

// Subclause 23.2.3.2 -- clause priority_queue

template <class T, class DEFTEMPARG (Container, vector<T>), 
          class DEFTEMPARG (Compare, less<typename Container::value_type>) >
class  priority_queue {

public:
    typedef typename Container::value_type        value_type;
    typedef typename Container::size_type         size_type;
    typedef Container                             container_type;

protected:
    Container c;
    Compare   comp;

public:

    explicit
    priority_queue (const Compare& x = Compare (), 
                    const Container& cont = Container ()) 
    : c (cont), comp (x) {}

#ifdef MSIPL_MEMBER_TEMPLATE
    template <class InputIterator>
    priority_queue (InputIterator first, InputIterator last, 
                    const Compare& x = Compare (), 
                    const Container& cont = Container ())
    : c (cont), comp (x) 
    {   
         c.insert (c.end (), first, last);
         make_heap (c.begin (), c.end (), comp);
    }
#else
    priority_queue (typename container_type::const_iterator first, 
                    typename container_type::const_iterator last, 
                    const Compare& x = Compare (), 
                    const Container& cont = Container ())
    : c (cont), comp (x)
    {   
          c.insert (c.end (), first, last);
          make_heap (c.begin (), c.end (), comp);
    }
#endif /* MSIPL_MEMBER_TEMPLATE */

    bool              empty ()        const { return c.empty (); }
    size_type         size ()         const { return c.size ();  }
    const value_type& top ()          const { return c.front (); }

    void push (const value_type& x)
    {
        MSIPL_TRY
        {     
            c.push_back (x); 
            push_heap (c.begin (), c.end (), comp);
        }
        MSIPL_CATCH
        {
            c.clear ();
            throw;
        }
     
    }
    void pop ()
    {
        MSIPL_TRY 
        {
            pop_heap (c.begin (), c.end (), comp);
            c.pop_back (); 
        }
        MSIPL_CATCH
        {
            c.clear ();
            throw;
        }
    }
};

#ifdef MSIPL_USING_NAMESPACE
	} // namespace std
#endif

#if defined(__CFM68K__) && !defined(__USING_STATIC_LIBS__)
	#pragma import reset
#endif
#pragma options align=reset

#endif // RC_INVOKED

#endif /* MSIPL_QUEUE_H */

// hh 971220 fixed MOD_INCLUDE
// hh 971223 Changed filename from queue.h to queue
// hh 971223 Made include guards standard
// hh 971223 added alignment wrapper
// hh 971229 added <deque>
// hh 971229 added <vector>
// hh 971230 added RC_INVOKED wrapper
// hh 980111 removed <functional>.  Not needed.
// hh 980113 Updated friend syntax of global methods and moved out of template definition.
